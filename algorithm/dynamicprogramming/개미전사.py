'''
기본 아이디어 : 
    만약 i번째 칸 창고식량을 가져간다면, i-1칸의 식량을 가져갈 수 없다.
    즉, i번째 칸 식량을 가져가려고 할때, i-1칸 까지의 합이 더 많은지 i칸 까지의 합이 더 많은지 고려해야한다.
    다음과 같은 점화식을 정의하고, 해결책을 일반화 시킨다.
    a[i] = i번째 칸을 선택할때, 이때까지의 선택한 식량의 합
    a[i] = max(a[i-1], a[i-2]+k[i]) (k[i] = i번째 칸의 식량)
'''

n = int(input())
arr = list(map(int, input().split()))
d = [0] * 100 # 메모이제이션을 위한 DP테이블

# 다이나믹프로그래밍을 진행
d[0] = arr[0]
d[1] = max(arr[0], arr[1])
for i in range(2, n):
    d[i] = max(d[i - 1], d[i - 2] + arr[i])

print(d[n - 1])